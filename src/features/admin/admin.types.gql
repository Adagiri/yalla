# src/features/admin/admin.types.gql
scalar DateTime
scalar JSON

# ===== ENUMS =====
enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  SUPPORT
  ANALYST
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
}

enum SystemHealthStatus {
  HEALTHY
  WARNING
  CRITICAL
  DOWN
}

enum AlertType {
  ERROR
  WARNING
  INFO
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

# ===== ADMIN TYPES =====
type Admin {
  id: ID!
  firstname: String
  lastname: String
  email: String
  role: AdminRole!
  permissions: [String!]!
  department: String!
  employeeId: String

  # Authentication & Security
  isEmailVerified: Boolean!
  isMFAEnabled: Boolean!
  lastLoginAt: DateTime
  lastActiveAt: DateTime
  isActive: Boolean!
  accessLevel: Int!

  # Profile
  profilePhoto: String
  phone: Phone
  timezone: String!
  language: String!

  # Stats
  totalLogins: Int!
  totalActions: Int!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type AdminAuthPayload {
  token: String!
  admin: Admin!
  expiresAt: DateTime!
}

type PaginatedAdmins {
  admins: [Admin!]!
  total: Int!
  page: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

# ===== DASHBOARD & ANALYTICS =====
type DashboardMetrics {
  overview: OverviewMetrics!
  todayStats: TodayStats!
  trends: TrendMetrics!
  tripsByStatus: TripsByStatus!
  recentActivity: [RecentActivity!]!
}

type OverviewMetrics {
  totalDrivers: Int!
  activeDrivers: Int!
  totalCustomers: Int!
  activeCustomers: Int!
  totalTrips: Int!
  completedTrips: Int!
  totalRevenue: Float!
  platformCommission: Float!
}

type TodayStats {
  tripsToday: Int!
  revenueToday: Float!
  newDriversToday: Int!
  newCustomersToday: Int!
  activeDriversToday: Int!
}

type TrendMetrics {
  tripsGrowth: Float!
  revenueGrowth: Float!
  driversGrowth: Float!
  customersGrowth: Float!
}

type TripsByStatus {
  pending: Int!
  active: Int!
  completed: Int!
  cancelled: Int!
}

type RecentActivity {
  type: String!
  description: String!
  timestamp: DateTime!
  amount: Float
}

# ===== SYSTEM HEALTH & MONITORING =====
type SystemHealth {
  status: SystemHealthStatus!
  uptime: Float!
  memory: MemoryUsage!
  database: DatabaseHealth!
  services: [ServiceHealth!]!
  metrics: SystemMetrics!
  timestamp: DateTime!
}

type MemoryUsage {
  used: Float!
  total: Float!
  percentage: Float!
}

type DatabaseHealth {
  status: String!
  responseTime: Float!
  connectionCount: Int!
}

type ServiceHealth {
  name: String!
  status: String!
  responseTime: Float
  lastCheck: DateTime!
}

type SystemMetrics {
  requestsPerMinute: Float!
  errorRate: Float!
  averageResponseTime: Float!
}

type SystemHealthHistory {
  period: String!
  dataPoints: Int!
  history: [HealthHistoryPoint!]!
}

type HealthHistoryPoint {
  timestamp: DateTime!
  status: SystemHealthStatus!
  memory: MemoryUsageHistory!
  metrics: MetricsHistory!
}

type MemoryUsageHistory {
  percentage: Float!
}

type MetricsHistory {
  errorRate: Float!
  averageResponseTime: Float!
  requestsPerMinute: Float!
}

type SystemAlert {
  id: ID!
  type: AlertType!
  severity: AlertSeverity!
  title: String!
  message: String!
  source: String!
  metadata: JSON
  resolved: Boolean!
  resolvedBy: String
  resolvedAt: DateTime
  createdAt: DateTime!
}

type SystemAlerts {
  alerts: [SystemAlert!]!
  total: Int!
  unresolved: Int!
  critical: Int!
}

# ===== NOTIFICATIONS =====
type AdminNotification {
  id: ID!
  recipientId: ID!
  senderId: ID
  sender: Admin

  title: String!
  message: String!
  type: NotificationType!
  priority: NotificationPriority!
  category: String!

  actionRequired: Boolean!
  actionUrl: String
  actionLabel: String

  isRead: Boolean!
  readAt: DateTime
  metadata: JSON

  timeAgo: String!
  createdAt: DateTime!
}

type PaginatedNotifications {
  notifications: [AdminNotification!]!
  total: Int!
  unreadCount: Int!
  page: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type NotificationStats {
  total: Int!
  unread: Int!
  critical: Int!
  actionRequired: Int!
  byCategory: [CategoryStat!]!
  byPriority: [PriorityStat!]!
}

type CategoryStat {
  category: String!
  count: Int!
  unread: Int!
}

type PriorityStat {
  priority: NotificationPriority!
  count: Int!
  unread: Int!
}

type BroadcastResult {
  sent: Int!
  target: String!
  recipients: Int!
  title: String!
  message: String!
}

# ===== SYSTEM CONFIGURATION =====
type SystemConfig {
  id: ID!
  category: String!
  key: String!
  value: JSON!
  description: String
  dataType: String!
  isPublic: Boolean!
  isRequired: Boolean!
  defaultValue: JSON

  validationRules: ValidationRules
  requiredPermission: String

  lastModifiedBy: String!
  lastModifiedAt: DateTime!
  version: Int!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type ValidationRules {
  min: Float
  max: Float
  minLength: Int
  maxLength: Int
  allowedValues: [JSON!]
  regex: String
  dataType: String
}

type PaginatedConfigs {
  configs: [SystemConfig!]!
  total: Int!
  page: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type ConfigUpdateResult {
  configId: String!
  success: Boolean!
  config: SystemConfig
  error: String
}

# ===== AUDIT LOGGING =====
type AuditLog {
  id: ID!
  adminId: ID
  adminEmail: String
  adminRole: AdminRole
  admin: Admin

  action: String!
  resource: String!
  resourceId: String

  changes: AuditChanges
  metadata: JSON
  ipAddress: String
  userAgent: String

  success: Boolean!
  errorMessage: String

  timeAgo: String!
  timestamp: DateTime!
}

type AuditChanges {
  before: JSON
  after: JSON
  fieldsChanged: [String!]
}

type PaginatedAuditLogs {
  logs: [AuditLog!]!
  total: Int!
  page: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type AuditStats {
  period: String!
  summary: AuditSummary!
  dailyStats: [DailyAuditStat!]!
  topAdmins: [TopAdmin!]!
  topActions: [TopAction!]!
  topResources: [TopResource!]!
  errorAnalysis: [ErrorAnalysis!]!
}

type AuditSummary {
  totalActions: Int!
  successfulActions: Int!
  failedActions: Int!
  successRate: Float!
  uniqueAdmins: Int!
  uniqueResources: Int!
  uniqueActions: Int!
}

type DailyAuditStat {
  date: String!
  successful: Int!
  failed: Int!
  total: Int!
}

type TopAdmin {
  adminId: String!
  adminEmail: String!
  adminRole: AdminRole!
  actionCount: Int!
  successfulActions: Int!
  failedActions: Int!
  successRate: Int!
  lastActivity: DateTime!
}

type TopAction {
  action: String!
  resource: String!
  count: Int!
  successRate: Int!
}

type TopResource {
  resource: String!
  count: Int!
  uniqueAdmins: Int!
  successRate: Int!
}

type ErrorAnalysis {
  errorMessage: String!
  count: Int!
  affectedResources: [String!]!
  affectedActions: [String!]!
  lastOccurrence: DateTime!
}

# ===== EMAIL TEMPLATES =====
type EmailTemplate {
  name: String!
  subject: String!
  html: String!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# ===== COMMON RESPONSE TYPES =====
type SuccessResponse {
  success: Boolean!
  message: String!
}

type HealthCheckResult {
  success: Boolean!
  health: SystemHealth!
  timestamp: DateTime!
}

type CleanupResult {
  success: Boolean!
  type: String!
  deletedCount: Int!
  cutoffDate: DateTime!
  message: String!
}
