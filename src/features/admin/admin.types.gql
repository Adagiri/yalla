scalar DateTime
scalar JSON

# ===== ENUMS =====
enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  SUPPORT
  ANALYST
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
}

enum SystemHealthStatus {
  HEALTHY
  WARNING
  CRITICAL
  DOWN
}

# ===== ADMIN TYPES =====
type Admin {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  role: AdminRole!
  permissions: [String!]!
  department: String!
  employeeId: String

  # Authentication & Security
  isEmailVerified: Boolean!
  isMFAEnabled: Boolean!
  lastLoginAt: DateTime
  lastActiveAt: DateTime
  isActive: Boolean!
  accessLevel: Int!

  # Profile
  profilePhoto: String
  phone: String
  timezone: String!
  language: String!

  # Stats
  totalLogins: Int!
  totalActions: Int!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type AuthPayload {
  token: String!
  admin: Admin!
  expiresAt: DateTime!
}

type PaginatedAdmins {
  admins: [Admin!]!
  total: Int!
  page: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

# ===== NOTIFICATIONS =====
type AdminNotification {
  id: ID!
  recipientId: ID!
  senderId: ID
  sender: Admin

  title: String!
  message: String!
  type: NotificationType!
  priority: NotificationPriority!
  category: String!

  actionRequired: Boolean!
  actionUrl: String
  actionLabel: String

  isRead: Boolean!
  readAt: DateTime
  metadata: JSON

  timeAgo: String!
  createdAt: DateTime!
}

type PaginatedNotifications {
  notifications: [AdminNotification!]!
  total: Int!
  unreadCount: Int!
  page: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type NotificationStats {
  total: Int!
  unread: Int!
  critical: Int!
  actionRequired: Int!
  byCategory: [CategoryStat!]!
  byPriority: [PriorityStat!]!
}

type CategoryStat {
  category: String!
  count: Int!
  unread: Int!
}

type PriorityStat {
  priority: NotificationPriority!
  count: Int!
  unread: Int!
}

# ===== SYSTEM CONFIGURATION =====
type SystemConfig {
  id: ID!
  category: String!
  key: String!
  value: JSON!
  description: String
  dataType: String!
  isPublic: Boolean!
  isRequired: Boolean!

  validationRules: ValidationRules
  requiredPermission: String

  lastModifiedBy: String!
  lastModifiedAt: DateTime!
  version: Int!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type ValidationRules {
  min: Float
  max: Float
  allowedValues: [JSON!]
  regex: String
}

type PaginatedConfigs {
  configs: [SystemConfig!]!
  total: Int!
  page: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

# ===== AUDIT LOGGING =====
type AuditLog {
  id: ID!
  adminId: ID!
  adminEmail: String!
  adminRole: AdminRole!
  admin: Admin

  action: String!
  resource: String!
  resourceId: ID

  changes: AuditChanges
  httpMethod: String
  endpoint: String
  ipAddress: String

  success: Boolean!
  errorMessage: String

  timestamp: DateTime!
  sessionId: String
  requestId: String
}

type AuditChanges {
  before: JSON
  after: JSON
  fieldsChanged: [String!]
}

type PaginatedAuditLogs {
  logs: [AuditLog!]!
  total: Int!
  page: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type AuditStats {
  dailyStats: [DailyAuditStats!]!
  topAdmins: [AdminActivity!]!
  topActions: [ActionStats!]!
}

type DailyAuditStats {
  date: String!
  successful: Int!
  failed: Int!
  total: Int!
}

type AdminActivity {
  adminId: ID!
  adminEmail: String!
  actionCount: Int!
  successfulActions: Int!
}

type ActionStats {
  action: String!
  resource: String!
  count: Int!
}

# ===== SYSTEM MONITORING =====
type SystemHealth {
  id: ID!
  timestamp: DateTime!
  overallStatus: SystemHealthStatus!

  apiMetrics: ApiMetrics!
  databaseMetrics: DatabaseMetrics!
  businessMetrics: BusinessMetrics!
  externalServices: ExternalServiceHealth!

  alerts: [SystemAlert!]!
}

type ApiMetrics {
  responseTime: Int!
  requestCount: Int!
  errorRate: Float!
  activeConnections: Int!
}

type DatabaseMetrics {
  connectionCount: Int!
  queryTime: Float!
  slowQueries: Int!
  storage: StorageInfo!
}

type StorageInfo {
  used: Float!
  available: Float!
  percentage: Int!
}

type BusinessMetrics {
  activeTrips: Int!
  onlineDrivers: Int!
  pendingRequests: Int!
  systemErrors: Int!
}

type ExternalServiceHealth {
  paystack: ServiceStatus!
  aws: ServiceStatus!
  maps: ServiceStatus!
  sms: ServiceStatus!
}

type ServiceStatus {
  status: String!
  responseTime: Int!
  uptime: Float!
}

type SystemAlert {
  id: ID!
  title: String!
  message: String!
  severity: NotificationPriority!
  component: String!
  resolvedAt: DateTime
  metadata: JSON
  createdAt: DateTime!
}

# ===== ANALYTICS =====
type DashboardMetrics {
  totalAdmins: Int!
  activeAdmins: Int!
  todayLogins: Int!
  criticalAlerts: Int!
  systemUptime: Float!

  recentActivities: [AuditLog!]!
  systemHealth: SystemHealth!
  notificationsSummary: NotificationStats!
}

# ===== INPUT TYPES =====
input AdminLoginInput {
  email: String!
  password: String!
}

input CreateAdminInput {
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  role: AdminRole!
  department: String!
  permissions: [String!]!
}

input UpdateAdminInput {
  firstname: String
  lastname: String
  email: String
  role: AdminRole
  department: String
  permissions: [String!]
  isActive: Boolean
  accessLevel: Int
}

input CreateNotificationInput {
  recipients: [ID!]!
  title: String!
  message: String!
  type: NotificationType!
  priority: NotificationPriority!
  category: String!
  actionRequired: Boolean
  actionUrl: String
  actionLabel: String
  metadata: JSON
}

input BroadcastNotificationInput {
  title: String!
  message: String!
  type: NotificationType!
  priority: NotificationPriority!
  category: String!
  targetRoles: [AdminRole!]
  targetDepartments: [String!]
  actionRequired: Boolean
  actionUrl: String
  actionLabel: String
  metadata: JSON
}

input CreateSystemConfigInput {
  category: String!
  key: String!
  value: JSON!
  description: String
  dataType: String!
  isPublic: Boolean
  isRequired: Boolean
}

input UpdateSystemConfigInput {
  value: JSON!
}

input NotificationFilters {
  isRead: Boolean
  type: NotificationType
  priority: NotificationPriority
  category: String
  actionRequired: Boolean
  page: Int
  limit: Int
}

input AuditLogFilters {
  adminId: ID
  resource: String
  action: String
  success: Boolean
  startDate: DateTime
  endDate: DateTime
  page: Int
  limit: Int
}

input ConfigFilters {
  category: String
  isPublic: Boolean
  searchTerm: String
  page: Int
  limit: Int
}

# ===== QUERIES =====
type Query {
  # ===== AUTHENTICATION & ADMIN MANAGEMENT =====
  getCurrentAdmin: Admin!
  getAllAdmins(page: Int = 1, limit: Int = 20): PaginatedAdmins!
  getAdminById(id: ID!): Admin

  # ===== DASHBOARD & ANALYTICS =====
  getDashboardMetrics: DashboardMetrics!
  getSystemHealth: SystemHealth!

  # ===== NOTIFICATIONS =====
  getMyNotifications(filters: NotificationFilters): PaginatedNotifications!
  getNotificationStats: NotificationStats!

  # ===== SYSTEM CONFIGURATION =====
  getSystemConfigs(filters: ConfigFilters): PaginatedConfigs!
  getSystemConfig(id: ID!): SystemConfig
  getConfigsByCategory(category: String!): [SystemConfig!]!
  getConfigCategories: [String!]!

  # ===== AUDIT LOGS =====
  getAuditLogs(filters: AuditLogFilters): PaginatedAuditLogs!
  getAuditStats(days: Int = 30): AuditStats!

  # ===== SYSTEM MONITORING =====
  getSystemHealthHistory(hours: Int = 24): [SystemHealth!]!
  getSystemAlerts(resolved: Boolean): [SystemAlert!]!
}

# ===== MUTATIONS =====
type Mutation {
  # ===== AUTHENTICATION =====
  adminLogin(input: AdminLoginInput!): AuthPayload!
  adminLogout: Boolean!

  # ===== ADMIN MANAGEMENT =====
  createAdmin(input: CreateAdminInput!): Admin!
  updateAdmin(id: ID!, input: UpdateAdminInput!): Admin!
  activateAdmin(id: ID!): Admin!
  deactivateAdmin(id: ID!): Admin!
  deleteAdmin(id: ID!): Boolean!

  # ===== NOTIFICATIONS =====
  createNotification(input: CreateNotificationInput!): [AdminNotification!]!
  broadcastNotification(input: BroadcastNotificationInput!): BroadcastResult!
  markNotificationAsRead(id: ID!): AdminNotification!
  markAllNotificationsAsRead: BulkOperationResult!
  deleteNotification(id: ID!): Boolean!

  # ===== SYSTEM CONFIGURATION =====
  createSystemConfig(input: CreateSystemConfigInput!): SystemConfig!
  updateSystemConfig(id: ID!, input: UpdateSystemConfigInput!): SystemConfig!
  deleteSystemConfig(id: ID!): Boolean!
  bulkUpdateConfigs(updates: [ConfigUpdate!]!): [ConfigUpdateResult!]!

  # ===== SYSTEM MANAGEMENT =====
  resolveSystemAlert(id: ID!): SystemAlert!
  triggerSystemHealthCheck: SystemHealth!
  cleanupOldData(days: Int!): CleanupResult!
}

# ===== SUBSCRIPTIONS (Real-time) =====
type Subscription {
  # ===== REAL-TIME NOTIFICATIONS =====
  adminNotificationReceived(adminId: ID!): AdminNotification!

  # ===== SYSTEM MONITORING =====
  systemHealthUpdated: SystemHealth!
  systemAlertCreated: SystemAlert!

  # ===== AUDIT TRAIL =====
  auditLogCreated(adminId: ID): AuditLog!

  # ===== ADMIN ACTIVITY =====
  adminStatusChanged: AdminStatusUpdate!

  # ===== CONFIGURATION CHANGES =====
  systemConfigUpdated(category: String): SystemConfig!
}

# ===== SUBSCRIPTION PAYLOAD TYPES =====
type AdminStatusUpdate {
  adminId: ID!
  isOnline: Boolean!
  lastActiveAt: DateTime!
}

type BroadcastResult {
  sent: Int!
  recipients: [ID!]!
  message: String!
}

type BulkOperationResult {
  modifiedCount: Int!
  message: String!
}

type ConfigUpdate {
  configId: ID!
  value: JSON!
}

type ConfigUpdateResult {
  configId: ID!
  success: Boolean!
  config: SystemConfig
  error: String
}

type CleanupResult {
  deletedLogs: Int!
  deletedNotifications: Int!
  freedSpace: String!
  message: String!
}
