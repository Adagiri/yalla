enum TripStatus {
  searching
  drivers_found
  driver_assigned
  driver_arrived
  in_progress
  completed
  cancelled
}

enum PaymentMethod {
  cash
  card
  wallet
}

enum PaymentStatus {
  pending
  completed
  failed
}

# Removed TripType enum completely since we're removing within_estate feature

enum TripSortField {
  requestedAt
  completedAt
  finalAmount
  distance
  status
}

enum SortDirection {
  ASC
  DESC
}

enum TimelineEventType {
  created
  drivers_found
  driver_assigned
  driver_arrived
  trip_started
  trip_completed
  cancelled
}

type LocationCoordinate {
  coordinates: [Float!]!
}

# ===== BASIC TYPES =====
type TripLocation {
  address: String!
  location: LocationCoordinate!
  # Removed estate field since we're removing within_estate feature
}

type RouteInfo {
  distance: Float! # in kilometers
  duration: Int! # in seconds
  polyline: String
}

type PricingBreakdown {
  baseFare: Float!
  distanceCharge: Float!
  timeCharge: Float!
  surgeFee: Float!
  discount: Float!
}

type TripPricing {
  baseAmount: Float!
  surgeMultiplier: Float!
  finalAmount: Float!
  currency: String!
  breakdown: PricingBreakdown!
}

type TimelineEvent {
  event: TimelineEventType!
  timestamp: DateTime!
  metadata: String
}

type PathPoint {
  coordinates: [Float!]!
  timestamp: DateTime!
}

type DriverLocationInfo {
  coordinates: [Float!]
  heading: Float
  speed: Float
  updatedAt: DateTime
}

# ===== MAIN TYPES =====
type Trip {
  id: ID!
  tripNumber: String!

  # Users
  driver: DriverPartial
  customer: CustomerPartial

  # Locations
  pickup: TripLocation!
  destination: TripLocation!

  # Route
  route: RouteInfo!

  # Pricing
  pricing: TripPricing!

  # Status
  status: TripStatus!
  paymentMethod: PaymentMethod!
  paymentStatus: PaymentStatus!

  # Timestamps
  requestedAt: DateTime!
  acceptedAt: DateTime
  startedAt: DateTime
  completedAt: DateTime
  cancelledAt: DateTime

  # Real-time info
  driverLocation: DriverLocationInfo
  verificationPin: String!

  # Ratings
  driverRating: Float
  customerRating: Float
  driverReview: String
  customerReview: String

  # Metadata
  estimatedArrival: DateTime
  actualDuration: Int

  # Additional fields from model
  timeline: [TimelineEvent!]!
  assignedBy: ID # Reference to admin who manually assigned
  actualPath: [PathPoint!] # Array of location points during trip
}

# ===== INPUT TYPES =====
input CoordinatesInput {
  coordinates: [Float!]!
}

input LocationInput {
  address: String!
  coordinates: CoordinatesInput!
}

input CreateTripInput {
  pickup: LocationInput!
  destination: LocationInput!
  paymentMethod: PaymentMethod!
  priceOffered: Float # Optional price customer is willing to pay
}

input updateDriverLocationForTripInput {
  tripId: ID!
  location: [Float!]!
  metadata: LocationMetadataInput
}

input LocationMetadataInput {
  heading: Float
  speed: Float
}

input StartTripInput {
  tripId: ID!
  pin: String!
}

input CancelTripInput {
  tripId: ID!
  reason: String
}

input RateTripInput {
  tripId: ID!
  rating: Int!
  review: String
}

input TripFilterInput {
  ids: [ID!]
  customerId: ID
  driverId: ID
  status: TripStatus
  paymentMethod: PaymentMethod
  dateFrom: DateTime
  dateTo: DateTime
  # Removed tripType and estateId filters
}

input TripSortInput {
  field: TripSortField!
  direction: SortDirection!
}

input TripEstimateInput {
  pickup: CoordinatesInput!
  destination: CoordinatesInput!
}

# ===== RESPONSE TYPES =====
type TripEstimate {
  "Distance in kilometers"
  distance: Float!
  "Duration in minutes"
  duration: Int!
  pricing: TripPricing!
  surgeActive: Boolean!
  surgeMultiplier: Float!
  "Duration in seconds"
  estimatedArrival: Int!
  "Route polyline for map display"
  polyline: String
}

type DriverEarnings {
  totalEarnings: Float!
  driverShare: Float!
  platformCommission: Float!
  totalTrips: Int!
  cashCollected: Float!
  cardPayments: Float!
  averagePerTrip: Float
}

type TripStats {
  totalTrips: Int!
  completedTrips: Int!
  cancelledTrips: Int!
  totalRevenue: Float!
  averageRating: Float!
  averageTripDuration: Int!
  averageDistance: Float!
}

type LocationUpdateResponse {
  success: Boolean!
  message: String!
}

type TripActionResponse {
  success: Boolean!
  message: String!
}

# ===== QUERIES & MUTATIONS =====
extend type Query {
  # Get trip estimate
  getTripEstimate(input: TripEstimateInput!): TripEstimate!

  # Get a driver's active trip
  getDriverActiveTrip: Trip

  # Get single trip
  getTrip(id: ID!): Trip

  # Get trip history for customer/driver
  getTripHistory(pagination: PaginationInput): [Trip!]!

  # Admin: List all trips with filters
  listTrips(
    filter: TripFilterInput
    sort: TripSortInput
    pagination: PaginationInput
  ): [Trip!]!

  # Admin: Get trip statistics
  getTripStats(dateFrom: DateTime, dateTo: DateTime): TripStats!

  # Driver: Get earnings
  getDriverEarnings(
    driverId: ID
    dateFrom: DateTime
    dateTo: DateTime
  ): DriverEarnings!
}

extend type Mutation {
  # Customer: Create new trip
  createTrip(input: CreateTripInput!): Trip!

  # Driver: Accept trip
  acceptTrip(tripId: ID!): Trip!

  # Driver: Update location during trip
  updateDriverLocationForTrip(
    input: updateDriverLocationForTripInput!
  ): LocationUpdateResponse!

  # Driver: Mark as arrived at pickup
  arrivedAtPickup(tripId: ID!): TripActionResponse!

  # Driver: Start trip with PIN
  startTrip(input: StartTripInput!): Trip!

  # Driver: Complete trip
  completeTrip(tripId: ID!): Trip!

  # Customer/Driver: Cancel trip
  cancelTrip(input: CancelTripInput!): Trip!

  # Customer/Driver: Rate trip
  rateTrip(input: RateTripInput!): Trip!

  # Admin: Manually assign trip to driver
  assignTripToDriver(tripId: ID!, driverId: ID!): Trip!
}
