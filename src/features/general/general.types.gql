# src/features/general/general.types.gql
# Scalars
scalar Date
scalar Time
scalar DateTime
scalar DefaultDate
scalar Any
scalar Number
scalar AnyObject
scalar Odd
scalar JSON # Added for admin system
# Enums
enum AuthChannel {
  SMS
  EMAIL
  GOOGLE
}

enum UploadUrl {
  PROFILE_PHOTO
  PRODUCT
  DRIVER_LISCENCE
  ADMIN_PROFILE # Added for admin profile photos
}

enum PaymentPurpose {
  ADD_CARD
  PAY_INVOICE
  PAY_INVOICES
}

enum PaymentMethod {
  card
  bank_transfer
}

enum PaymentTransactionStatus {
  SUCCESS
  FAILED
  REVERSED
}

enum PaymentStatus {
  PAID # The invoice has been fully settled.
  OUTSTANDING # No payment has been received yet (previously "pending").
  PARTIALLY_PAID # Only part of the invoice amount has been paid.
}

enum DeviceType {
  ANDROID
  IOS
}

enum AccountType {
  ADMIN
  DRIVER
  CUSTOMER
}

enum AccountLevel {
  MAIN
  SUB
  NONE
}

enum ResendCodeScenario {
  MFA
  ACCOUNT_ACTIVATION
  RESET_PASSWORD
}

enum UserCategory {
  OWNER
  TENANT
}

enum SortDirection {
  ASC
  DESC
}

# Common Types
type PaginatedPayload {
  totalDocs: Int!
  docsRetrieved: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

# Updated to support admin authentication
union AuthEntity = Driver | Customer | Admin

union AccountEntity = Driver | Customer | Admin

input EnableMfaInput {
  authChannel: AuthChannel! # Type of MFA: 'email' or 'sms'
}

input PhoneInput {
  countryCode: String!
  localNumber: String!
  fullPhone: String!
}

input RegisterManagerInput {
  name: String!
  email: String
  country: String!
  password: String!
  phone: PhoneInput
  authChannel: AuthChannel!
}

# Enhanced to support admin login
input LoginInput {
  email: String
  phone: PhoneInput
  password: String!
  authChannel: AuthChannel!
  accountType: AccountType!
}

input ResendCodeInput {
  token: String!
  accountType: AccountType!
  scenario: ResendCodeScenario!
}

input VerifyCodeInput {
  token: String!
  code: String!
  accountType: AccountType!
}

input ResetPasswordRequestInput {
  email: String
  phone: String
  authChannel: AuthChannel!
  accountType: AccountType!
}

input ResetPasswordInput {
  password: String!
  token: String!
  code: String!
  accountType: AccountType!
}

# Enhanced AuthPayload that can return different entity types
type AuthPayload {
  entity: AuthEntity
  token: String
  expiresAt: DateTime # Added for token expiration
}

# Phone Type
type Phone {
  countryCode: String # E.g., "+1"
  localNumber: String # E.g., "4155552671"
  fullPhone: String # E.g., "+14155552671"
}

type PaymentMetadata {
  purpose: PaymentPurpose!
  resourceIds: [ID]!
  resourceType: ID!
  payerType: AccountType!
  payerId: ID!
  payerCategory: UserCategory
  baseAmounts: [Float!]!
}

# Enhanced image upload to support admin profile photos
type ImageUploadUrlResponse {
  uploadUrl: String!
  url: String!
}

input ImageUploadUrlInput {
  purpose: UploadUrl!
  contentType: String!
}

# Inputs
input TagInput {
  name: String!
  value: String!
}

"""
Tie-breaker cursor input for keyset pagination.
'fieldValue' corresponds to the primary sort field (e.g., a string),
'id' is used to break ties between documents sharing the same fieldValue.
"""
input CursorInput {
  fieldValue: String!
  id: ID!
}

"""
Keyset-based pagination input.
- 'limit' controls how many items to return.
- 'after' fetches items after (i.e., older if sorting DESC) a specific boundary.
- 'before' fetches items before (i.e., newer if sorting DESC) a specific boundary.
"""
input KeysetPaginationInput {
  limit: Int = 10
  after: CursorInput
  before: CursorInput
}

input PaginationInput {
  page: Int! # Page number (1-based index)
  limit: Int! # Number of items per page
}

# Common error type for better error handling
type ErrorDetails {
  code: String!
  message: String!
  field: String
}

# Common success response
type OperationResult {
  success: Boolean!
  message: String
  errors: [ErrorDetails!]
}
